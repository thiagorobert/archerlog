import ConnDB = require('ssb-conn-db');
import ConnHub = require('ssb-conn-hub');
import ConnStaging = require('ssb-conn-staging');
import ConnQuery = require('ssb-conn-query');
import { StagedData } from 'ssb-conn-staging/lib/types';
import { Callback } from './types';
export declare class CONN {
    private readonly ssb;
    private readonly config;
    private readonly _db;
    private readonly _hub;
    private readonly _staging;
    private readonly _query;
    constructor(ssb: any, cfg: any);
    private initialize;
    private setupCloseHook;
    private maybeAutoStartScheduler;
    private startScheduler;
    private stopScheduler;
    remember: (address: string, data?: any) => void;
    forget: (address: string) => void;
    dbPeers: () => [string, import("ssb-conn-db/lib/types").AddressData][];
    connect: (address: string, b?: Record<string, any> | null | undefined | Callback<any>, c?: Callback<any> | undefined) => void;
    disconnect: (address: string, cb?: Callback<any> | undefined) => void;
    peers: () => any;
    stage: (address: string, data?: Partial<StagedData>) => boolean;
    unstage: (address: string) => boolean;
    stagedPeers: () => any;
    start: () => Promise<void>;
    stop: () => void;
    ping: () => any;
    db: () => ConnDB;
    hub: () => ConnHub;
    staging: () => ConnStaging;
    query: () => ConnQuery;
}
