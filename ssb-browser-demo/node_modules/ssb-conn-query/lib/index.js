"use strict";
const Time = require("./queries/time");
const Health = require("./queries/health");
const Sorting = require("./queries/sorting");
class ConnQuery {
    constructor(db, hub, staging) {
        this.db = db;
        this.hub = hub;
        this.staging = staging;
    }
    _hubEntryToPeer([address, hubData]) {
        const stagingEntry = Array.from(this.staging.entries()).find(([addr]) => addr === address);
        const peer = this.db.has(address)
            ? [address, { pool: 'db', ...this.db.get(address) }]
            : !!stagingEntry
                ? [address, { pool: 'staging', ...stagingEntry[1] }]
                : [address, { pool: 'hub', ...hubData }];
        if (hubData.key && !peer[1].key) {
            peer[1].key = hubData.key;
        }
        return peer;
    }
    peersAll() {
        return this.peersConnectable('dbAndStaging').concat(this.peersInConnection());
    }
    peersConnected() {
        return Array.from(this.hub.entries())
            .filter(([_address, data]) => data.state === 'connected')
            .map((e) => this._hubEntryToPeer(e));
    }
    peersConnecting() {
        return Array.from(this.hub.entries())
            .filter(([_address, data]) => data.state === 'connecting')
            .map((e) => this._hubEntryToPeer(e));
    }
    peersInConnection() {
        return Array.from(this.hub.entries())
            .filter(([_address, data]) => data.state === 'connected' || data.state === 'connecting')
            .map((e) => this._hubEntryToPeer(e));
    }
    peersConnectable(pool = 'db') {
        const useDB = pool === 'db' || pool === 'dbAndStaging';
        const useStaging = pool === 'staging' || pool === 'dbAndStaging';
        const dbPool = useDB
            ? Array.from(this.db.entries()).map(([addr, data]) => [
                addr,
                { pool: 'db', ...data },
            ])
            : [];
        const stagingPool = useStaging
            ? Array.from(this.staging.entries()).map(([addr, data]) => [
                addr,
                { pool: 'staging', ...data },
            ])
            : [];
        return []
            .concat(dbPool)
            .concat(stagingPool)
            .filter(([address]) => {
            const state = this.hub.getState(address);
            return state !== 'connected' && state !== 'connecting';
        });
    }
}
ConnQuery.passesExpBackoff = Time.passesExpBackoff;
ConnQuery.passesGroupDebounce = Time.passesGroupDebounce;
ConnQuery.hasNoAttempts = Health.hasNoAttempts;
ConnQuery.hasOnlyFailedAttempts = Health.hasOnlyFailedAttempts;
ConnQuery.hasSuccessfulAttempts = Health.hasSuccessfulAttempts;
ConnQuery.hasPinged = Health.hasPinged;
ConnQuery.sortByStateChange = Sorting.sortByStateChange;
module.exports = ConnQuery;
