/**
 * ssb-typescript
 * --------------
 *
 * Contains type definitions for common SSB concepts.
 *
 *     npm install ssb-typescript
 *
 * Usage:
 *
 *     import {Msg} from 'ssb-typescript';
 */
/**
 * Starts with @
 */
export declare type FeedId = string;
/**
 * Starts with %
 */
export declare type MsgId = string;
/**
 * Starts with &
 */
export declare type BlobId = string;
export declare type Msg<C = Content> = {
    key: MsgId;
    value: {
        previous: MsgId;
        author: FeedId;
        sequence: number;
        timestamp: number;
        hash: 'sha256';
        content: C;
        signature: string;
    };
    timestamp: number;
};
export declare type MsgInThread = Msg<{
    root?: MsgId;
    fork?: MsgId;
    branch?: MsgId;
}>;
export declare type UnboxedMsg<C = Content> = Msg<C> & {
    value: Msg<C>['value'] & {
        cyphertext: string;
        private: true;
        unbox: string;
    };
    meta?: {
        private: true;
        originalContent: string;
    };
};
export declare type Privatable<T> = T & {
    recps?: Array<FeedId>;
};
export declare type Content = Privatable<PostContent> | Privatable<ContactContent> | Privatable<VoteContent> | Privatable<AboutContent> | null;
export declare type PostContent = {
    type: 'post';
    text: string;
    channel?: string;
    /**
     * Links
     */
    mentions?: Array<any>;
    root?: MsgId;
    branch?: MsgId | Array<MsgId>;
    fork?: MsgId;
};
export declare type AboutContent = {
    type: 'about';
    about: FeedId;
    name?: string;
    description?: string;
    image?: string;
};
export declare type ContactContent = {
    type: 'contact';
    contact?: FeedId;
    following?: boolean;
    blocking?: boolean;
};
export declare type VoteContent = {
    type: 'vote';
    vote: {
        link: MsgId;
        value: number;
        expression: string;
    };
};
export declare type About = {
    name?: string;
    description?: string;
    color?: string;
    imageUrl?: string;
    id?: FeedId;
    /**
     * true means following
     * null means not-following
     * false means blocked
     */
    following?: true | null | false;
};
export declare type PeerMetadata = {
    host: string;
    port: number;
    key: string;
    name?: string;
    source: 'local' | 'pub' | 'manual';
    announcers?: number;
    duration?: any;
    client: boolean;
    state: 'connecting' | 'connected' | 'disconnecting' | undefined;
    stateChange: number;
    ping?: {
        rtt: {
            mean: number;
            stdev: number;
            count: number;
            sum: number;
            sqsum: number;
        };
        skew: {
            mean: number;
            stdev: number;
            count: number;
            sum: number;
            sqsum: number;
        };
    };
};
