"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toCamelCase = exports.hookOptionalCB = exports.merge = exports.toId = exports.clone = void 0;
var mapMerge = require('map-merge');
var camelize = require('to-camel-case');
function isObject(o) {
    return o && typeof o === 'object';
}
function clone(obj, mapper) {
    function map(v, k) {
        return isObject(v) ? clone(v, mapper) : mapper(v, k);
    }
    if (Array.isArray(obj)) {
        return obj.map(map);
    }
    else if (isObject(obj)) {
        var o = {};
        for (var k in obj) {
            o[k] = map(obj[k], k);
        }
        return o;
    }
    else {
        return map(obj);
    }
}
exports.clone = clone;
function toId(pub) {
    return Buffer.isBuffer(pub) ? pub.toString('base64') + '.ed25519' : pub;
}
exports.toId = toId;
exports.merge = {
    permissions: function (perms, _perms, name) {
        return mapMerge(perms, clone(_perms, function (v) { return name ? name + '.' + v : v; }));
    },
    manifest: function (manf, _manf, name) {
        if (name) {
            var o = {};
            o[name] = _manf;
            _manf = o;
        }
        return mapMerge(manf, _manf);
    }
};
function hookOptionalCB(syncFn) {
    syncFn.hook(function (fn, args) {
        var cb = args[args.length - 1];
        if (typeof cb === 'function') {
            var res = void 0;
            args.pop();
            try {
                res = fn.apply(this, args);
            }
            catch (e) {
                return cb(e);
            }
            cb(null, res);
        }
        else {
            return fn.apply(this, args);
        }
    });
}
exports.hookOptionalCB = hookOptionalCB;
function toCamelCase(n) {
    return n ? camelize(n) : n;
}
exports.toCamelCase = toCamelCase;
