"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.muxrpcMissing = exports.toTunnelAddress = exports.openRoomInviteToAddress = exports.addressToOpenRoomInvite = exports.isOpenRoomInvite = exports.SEED = void 0;
const { isAddress } = require('ssb-ref');
exports.SEED = 'SSB+Room+PSK3TLYC2T86EHQCUHBUHASCASE18JBV24=';
function isOpenRoomInvite(invite) {
    if (typeof invite !== 'string')
        return false;
    if (!invite)
        return false;
    if (!invite.endsWith(':' + exports.SEED))
        return false;
    const [addr] = invite.split(':' + exports.SEED);
    if (!addr)
        return false;
    if (!isAddress(addr))
        return false;
    return true;
}
exports.isOpenRoomInvite = isOpenRoomInvite;
function addressToOpenRoomInvite(addr) {
    return typeof addr === 'string' ? `${addr}:${exports.SEED}` : null;
}
exports.addressToOpenRoomInvite = addressToOpenRoomInvite;
function openRoomInviteToAddress(invite) {
    return isOpenRoomInvite(invite) ? invite.split(':' + exports.SEED)[0] : null;
}
exports.openRoomInviteToAddress = openRoomInviteToAddress;
function toTunnelAddress(portal, target) {
    const shs = target.slice(1, -8);
    return `tunnel:${portal}:${target}~shs:${shs}`;
}
exports.toTunnelAddress = toTunnelAddress;
function muxrpcMissing(err) {
    if (!err)
        return false;
    const errString = typeof err.message === 'string'
        ? err.message
        : typeof err === 'string'
            ? err
            : '';
    return errString.endsWith('not in list of allowed methods');
}
exports.muxrpcMissing = muxrpcMissing;
