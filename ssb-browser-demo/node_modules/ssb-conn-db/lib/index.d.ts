import { AddressData, Opts } from './types';
declare type Updater = (prev: AddressData) => AddressData;
declare class ConnDB {
    private readonly _map?;
    private readonly _notify?;
    private readonly _writeTimeout;
    private readonly _loadedPromise;
    private readonly _modernPath;
    private _closed;
    private _loadedResolve;
    private _loadedReject;
    private _scheduledWriteTask;
    constructor(opts: Partial<Opts>);
    private _fileExists;
    private _init;
    private _load;
    private _serialize;
    private _write;
    private _cancelScheduleWrite;
    private _scheduleWrite;
    private _assertNotClosed;
    private _assertValidAddress;
    private _assertValidData;
    replace(address: string, data: AddressData): ConnDB;
    set(address: string, data: AddressData): ConnDB;
    update(address: string, x: AddressData | Updater): ConnDB;
    get(address: string): AddressData | undefined;
    getAddressForId(id: string): string | undefined;
    has(address: string): boolean;
    delete(address: string): boolean;
    entries(): IterableIterator<[string, AddressData]>;
    listen(): any;
    loaded(): Promise<true>;
    close(): void;
}
export = ConnDB;
