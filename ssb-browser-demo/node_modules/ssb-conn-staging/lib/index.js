"use strict";
const pull = require('pull-stream');
const cat = require('pull-cat');
const Notify = require('pull-notify');
const msAddress = require('multiserver-address');
const debug = require('debug')('ssb:conn-staging');
class ConnStaging {
    constructor() {
        this._peers = new Map();
        this._closed = false;
        this._notifyEvent = Notify();
        this._notifyEntries = Notify();
    }
    _assertNotClosed() {
        if (this._closed) {
            throw new Error('This ConnStaging instance is closed, create a new one.');
        }
    }
    _assertValidAddress(address) {
        if (!msAddress.check(address)) {
            throw new Error('The given address is not a valid multiserver-address');
        }
    }
    _updateLiveEntries() {
        this._notifyEntries(Array.from(this._peers.entries()));
    }
    stage(address, data) {
        this._assertNotClosed();
        this._assertValidAddress(address);
        const now = Date.now();
        if (this._peers.has(address)) {
            const previous = this._peers.get(address);
            this._peers.set(address, { ...previous, stagingUpdated: now, ...data });
            this._updateLiveEntries();
            return false;
        }
        else {
            this._peers.set(address, {
                stagingBirth: now,
                stagingUpdated: now,
                ...data,
            });
            debug('staged peer %s', address);
            this._notifyEvent({ type: 'staged', address });
            this._updateLiveEntries();
            return true;
        }
    }
    unstage(address) {
        this._assertNotClosed();
        this._assertValidAddress(address);
        if (!this._peers.has(address))
            return false;
        this._peers.delete(address);
        debug('unstaged peer %s', address);
        this._notifyEvent({ type: 'unstaged', address });
        this._updateLiveEntries();
        return true;
    }
    get(address) {
        this._assertNotClosed();
        this._assertValidAddress(address);
        return this._peers.get(address);
    }
    entries() {
        this._assertNotClosed();
        return this._peers.entries();
    }
    liveEntries() {
        this._assertNotClosed();
        return cat([
            pull.values([Array.from(this._peers.entries())]),
            this._notifyEntries.listen(),
        ]);
    }
    listen() {
        this._assertNotClosed();
        return this._notifyEvent.listen();
    }
    close() {
        this._closed = true;
        this._notifyEvent.end();
        this._peers.clear();
        debug('closed the ConnStaging instance');
    }
}
module.exports = ConnStaging;
