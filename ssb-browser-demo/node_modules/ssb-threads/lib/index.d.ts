import { Opts, ProfileOpts, ThreadOpts, UpdatesOpts, ThreadUpdatesOpts } from './types';
declare class threads {
    private readonly ssb;
    private readonly isBlocking;
    constructor(ssb: Record<string, any>, _config: any);
    private removeMessagesFromBlocked;
    private nonBlockedRootToThread;
    private nonBlockedRootToSummary;
    /**
     * Returns a pull-stream operator that:
     * 1. Checks if there is a Msg in the cache for the source MsgId
     * 2. If not in the cache, do a database lookup
     */
    private fetchMsgFromIdIfItExists;
    private rootToThread;
    public: (opts: Opts) => any;
    publicSummary: (opts: Omit<Opts, 'threadMaxSize'>) => any;
    publicUpdates: (opts: UpdatesOpts) => any;
    private: (opts: Opts) => any;
    privateUpdates: (opts: UpdatesOpts) => any;
    profile: (opts: ProfileOpts) => any;
    profileSummary: (opts: Omit<ProfileOpts, 'threadMaxSize'>) => any;
    thread: (opts: ThreadOpts) => any;
    threadUpdates: (opts: ThreadUpdatesOpts) => any;
}
export = threads;
